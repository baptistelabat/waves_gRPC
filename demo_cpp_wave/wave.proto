syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.grpc.examples.wave";
option java_outer_classname = "WaveProto";
option objc_class_prefix = "HLW";

package wave;

// The elevation service definition.
service ElevationService
{
    rpc GetElevation (ElevationRequest) returns (ElevationResponse) {}
    rpc GetElevationInputRepeated (ElevationRequestRepeated) returns (ElevationResponse) {}
    rpc GetElevationOutputRepeated (ElevationRequest) returns (ElevationResponseRepeated) {}
    rpc GetElevationRepeated (ElevationRequestRepeated) returns (ElevationResponseRepeated) {}
    rpc GetElevations (ElevationRequest) returns (stream ElevationResponse) {}
}

// The point coordinates
message Point
{
    double x = 1;
    double y = 2;
}

// The request message containing the point coordinates and the time.
message ElevationRequest
{
    repeated Point points = 1;
    double t = 2;
    double t_start = 3;
    double t_end = 4;
    double dt = 5;
}

// The elevation and associated point coordinates
message ElevationPoint
{
    double z = 1;
    double x = 2;
    double y = 3;
}

// The response message containing the elevation
message ElevationResponse
{
    repeated ElevationPoint elevation_points = 1;
    double t = 2;
}

// The discrete directional wave spectrum
message WaveSpectrumLine
{
    double a = 1;       //!< Amplitude (in m)
    double omega = 2;   //!< Angular frequencies the spectrum was discretized at (in rad/s)
    double psi = 3;     //!< Directions between 0 & 2pi the spatial spreading was discretized at (in rad)
    double k = 4;       //!< Discretized wave number (for each frequency) in rad/m
    double phase = 5;   //!< Random phases, for each (direction,frequency) couple (but time invariant) in radian
}

message FlatDiscreteDirectionalWaveSpectrum
{
    repeated WaveSpectrumLine spectrum_lines = 1;
}


// Performance tests
// The request message containing the point coordinates and the time.
message ElevationRequestRepeated
{
    repeated double x = 1;
    repeated double y = 3;
    double t = 2;
}
// The response message containing the elevation
message ElevationResponseRepeated
{
    repeated double z = 1;
    double t = 2;
    repeated double x = 3;
    repeated double y = 4;
}